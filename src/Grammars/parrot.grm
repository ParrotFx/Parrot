"Name"     = 'Parrot'
"Author"   = 'Ben Dornis'
"Version"  = '0.1'
"About"    = ''

"Start Symbol" = <Statements>
               
! -------------------------------------------------
! Character Sets
! -------------------------------------------------
{ID Head} = {Letter} + [_] + [.] + [#]
{ID Tail} = {AlphaNumeric} + [_] + [-] + [.] + [:] + [#]
{String Ch} = {All Valid} - {Control Codes} - {Formatting}
{String Literal Pipe} = {String Ch}
 
{Single Quote String Chars}           = {String Ch} + {HT} - ['']
{Double Quote String Chars}           = {String Ch} + {HT} - ['"']
{Single Quote MultiLine String Chars} = {String Ch} + {HT} + {CR} + {LF} - ['']
{Double Quote MultiLine String Chars} = {String Ch} + {HT} + {CR} + {LF} - ['"']

! -------------------------------------------------
! Terminals
! -------------------------------------------------

Identifier       = {ID Head} {ID Tail}*
                                    
StringLiteral = '' {Single Quote String Chars}* '' | '"' {Double Quote String Chars}* '"'
MultiLineStringLiteral = '@' '"' {Double Quote MultiLine String Chars}* '"' 
                       | '@' '' {Single Quote MultiLine String Chars}* ''

StringLiteralPipe = '|' {String Literal Pipe}* ({CR} | {LF} | EOF)
 
Comment Line = '//'
Comment Start = '/*'
Comment End = '*/'

! -------------------------------------------------
! Rules
! -------------------------------------------------

! The grammar starts below

<Parameter> ::= StringLiteral
              | Identifier

<Parameter List> ::= <Parameter>
                   | <Parameter List> ',' <Parameter>

<Parameters> ::= '(' <Parameter List> ')'
               | 

<Attribute> ::= Identifier '=' StringLiteral
              | Identifier '=' Identifier
              | Identifier

<Attribute List> ::= <Attribute>
                   |  <Attribute List> <Attribute>

<Attributes> ::= '[' <Attribute List> ']'
               |

<Sibling> ::= <Statement> '+' <Statement>
            | <Sibling> '+' <Statement>
            
<Child> ::= <Statement> '>' <Statement>
          | <Statement> '>' <Sibling>
          | <Statement> '>' <Child>

<Statements> ::= <Statement>
               | <Statements> <Statement>
               | <Sibling>
               | <Child>
               
<Statement Tail> ::= <Attributes><Parameters> '{' <Statements> '}'
                   | <Attributes><Parameters> '{' '}'
                   | <Attributes><Parameters>

<Statement> ::= Identifier<Statement Tail>
              | <OutputStatement>
              | MultiLineStringLiteral
              | StringLiteral
              | StringLiteralPipe
              
<OutputStatement> ::= ':' Identifier
                    | '=' Identifier

